.TH sng 1 "" "Open Source"
.SH NAME
sng -- compiler/decompiler for Scriptable Network Graphics
.SH SYNOPSIS
sng [-cd]
.SH DESCRIPTION
The sng program compiles Scriptable Network Graphics, a printable and
editable minilanguage for describing PNG and MNG files.  The output of
the program, in its normal mode, is a PNG or MNG file.  In its check
mode, it validates an existing MNG or PNG file.

An SNG description consists of a series of chunk specifications in a
simple editable text format.  These generally correspond one-for-one
to PNG/MNG chunks.  There are two exceptions. The IMAGE chunk
specification is automatically translated into an IDAT chunk
(doing appropriate interlacing, compression, etcetera).  The PRIVATE
chunk expresses nonstandard chunks as raw data.
.SH SNG LANGUAGE SYNTAX
In general, the SNG language is token-oriented with tokens separated
by whitespace.  

In the syntax descriptions below, lines between {} may occur in any
order. Elements bracketed in [] are optional; a sequence bracketed by
[]* may be repeated any number of times.  Elements separated by plus
signs are an attribute set; any sequence of one or more of those
element tokens is valid.  

The elements <byte>, <long>, <float>, <string> are byte numeric,
long-integer numeric, float numeric, and doublequote-delimited
strings respectively.  All numerics use C conventions; that is, they
are decimal unless led by 0x (hex) or 0 (octal).

A <data> literal consists of a sequence of byte specifications in one
of two formats.  Char-per-pixel format can be used if the image either
has total (color plus alpha) bit depth of four or less, or it is a
paletted image with 62 or fewer colors; values of the chars are 0-9,
followed by a-z for 10-35, followed by A-Z for 36-62.  Otherwise, each
byte is specified by two hex digits (0123456789abcdef).  Whitespace
embedded in data literals is ignored.

Comments in the syntax diagram describe intended semantics.
.nf
IHDR {
   height <long>
   width <long>
   bitdepth <byte> 
   [using color+palette+alpha]	# PNG color type information
   [with interlace]		# Adam7 assumed if interlacing on
}

PLTE {
   [(<byte>,<byte>,<byte>)]*	# Any number of RGB triples
}

IDAT {<data>}

gAMA {<float>}

cHRM {
   white (<float>,<float>)	# White point x and y
   red (<float>,<float>)
   green (<float>,<float>)
   blue (<float>,<float>)
}

sRGB {<byte>}			# Colorimetry intent, range 0-3

iCCP {<string>}			# International Color Consortium profile name

sBIT {
   red <byte>			# Color images only
   blue <byte>			# Color images only
   green <byte>			# Color images only
   gray <byte>			# Grayscale images only
   alpha <byte>			# Images with alpha only
}

bKGD {
   red <short>			# Color images only
   blue <short>			# Color images only
   green <short>		# Color images only
   gray <short>			# Grayscale images only
   index <byte>			# Paletted images only
}

hIST {
   <short> [, <short>]*		# Count must match palette size
}

sTRN {
   [gray <short>]		# Grayscale images only
   [<byte>]*			# Paletted images only
   [red <short>]		# True-color images only
   [green <short>]		# True-color images only
   [blue <short>]		# True-color images only
}

tEXt {				# Ordinary text chunk
  keyword <string>
  text <string>
}

zTXt {				# Compressed text chunk
  keyword <string>
  text <string>
}

iTXt {				# International UTF-8 keyword
  language <string>
  keyword <string>
  text <string>
}

IMAGE {<data>}
.fi

.SH BUGS
Certain known safe-to-copy chunks that could theoretically occur
before IDAT, such as the text chunks, are moved to after IDAT.  This
reflects a limitation of libpng, which is designed to aggregate most
non-text chunks in an image structure and write them out just before
writing out the image.  This transformation is legal, but means that
`sng | sng -d' is not necessarily a no-op.

Declaring a cHRM triggers a libpng warning about a supposedly
incorrect sBIT value; it is not clear why.  This may be a PNG library
bug.

This is an alpha version.  MNG support is not there yet.
.SH AUTHOR
Eric S. Raymond <esr@snark.thyrsus.com> November 1990 (home page at
http://www.tuxedo.org/~esr/).


